{"name":"Bostring","tagline":"Create NSAttributedString like a boss!","body":"NSAttributedString&nbsp;&nbsp;[![Build Status](https://travis-ci.org/kovpas/BOString.png?branch=develop)](https://travis-ci.org/kovpas/BOString)\r\n========\r\n\r\nIt's not a secret that NSAttributedString API is far from perfect. Based on NSDictionary, it looks ugly, counter-OOP and hard to maintain...\r\n\r\n````\r\nNSMutableAttributedString *attributedString = [[NSMutableAttributedString alloc] initWithString:@\"Test attributed string\" attributes:@{NSForegroundColorAttributeName: [UIColor greenColor], NSFontAttributeName: [fnt fontWithSize:20]}];\r\n[attributedString addAttributes:@{NSForegroundColorAttributeName: [UIColor redColor]\r\n                                  , NSFontAttributeName: [fnt2 fontWithSize:10]\r\n                                  , NSLigatureAttributeName: @2\r\n                                  , NSBaselineOffsetAttributeName: @1}\r\n                          range:NSMakeRange(3, 5)];\r\n[attributedString addAttributes:@{NSForegroundColorAttributeName: [UIColor blueColor]\r\n                                  , NSFontAttributeName: [fnt2 fontWithSize:30]}\r\n                          range:NSMakeRange(6, 9)];\r\n[attributedString addAttributes:@{NSStrikethroughStyleAttributeName: @(NSUnderlineStyleSingle)\r\n                                  , NSStrikethroughColorAttributeName: [UIColor redColor]\r\n                                  , NSBackgroundColorAttributeName: [UIColor yellowColor]}\r\n                          range:NSMakeRange(7, 4)];\r\n_attributedTextView2.attributedText = attributedString;\r\n````\r\n\r\nSome developers get really desperate and write tools like [this](https://itunes.apple.com/us/app/attributed-string-creator/id730928349?mt=12)... Which again proves that NSAttributedString API is far from perfect.\r\n\r\nMasonry\r\n========\r\n\r\nI love [masonry](https://github.com/cloudkite/Masonry). I love its clarity, its syntax. If you are using autolayout in your project and still write constraints using NSLayoutConstraint API, you should definitely take a look at masonry. Clear and very brief syntax makes code much more human readable, easy to maintain and modify.\r\n\r\nBOString\r\n========\r\n\r\nSo, based on masonry syntax, I decided to create a similar framework, which will take away some pain of creating NSAttributedString:\r\n\r\n````\r\nNSMutableAttributedString *attributedString = [@\"Test attributed string\" makeString:^(BOStringMaker *make) {\r\n    make.foregroundColor([UIColor greenColor]);\r\n    make.font([fnt fontWithSize:20]);\r\n\r\n    make.with.range(NSMakeRange(3, 5), ^{\r\n        make.foregroundColor([UIColor redColor]);\r\n        make.font([fnt2 fontWithSize:10]);\r\n        make.ligature(@2);\r\n        make.baselineOffset(@1);\r\n    });\r\n\r\n    make.with.range(NSMakeRange(6, 9), ^{\r\n        make.foregroundColor([UIColor blueColor]);\r\n        make.font([fnt2 fontWithSize:30]);\r\n    });\r\n\r\n    make.with.range(NSMakeRange(7, 4), ^{\r\n        make.strikethroughStyle(@(NSUnderlineStyleSingle));\r\n        make.strikethroughColor([UIColor redColor]);\r\n        make.backgroundColor([UIColor yellowColor]);\r\n    });\r\n}];\r\n````\r\n\r\nWhat attributes BOString supports? In fact, it supports all of them:\r\n\r\n````\r\nfont;\r\nparagraphStyle;\r\nforegroundColor;\r\nbackgroundColor;\r\nligature;\r\nkern;\r\nstrikethroughStyle;\r\nunderlineStyle;\r\nstrokeColor;\r\nstrokeWidth;\r\nshadow;\r\ntextEffect;           // iOS only\r\nattachment;\r\nlink;\r\nbaselineOffset;\r\nunderlineColor;\r\nstrikethroughColor;\r\nobliqueness;\r\nexpansion;\r\nwritingDirection;\r\nverticalGlyphForm;\r\nsuperscript;          // OS X only\r\ncursor;               // OS X only\r\ntoolTip;              // OS X only\r\ncharacterShape;       // OS X only\r\nglyphInfo;            // OS X only\r\nmarkedClauseSegment;  // OS X only\r\ntextAlternatives;     // OS X only\r\n````\r\n\r\nWhile making a string you can specify ranges for attributes either with a block-based syntax as in the example above:\r\n````\r\nmake.with.range(NSMakeRange(6, 9), ^{\r\n    make.foregroundColor([UIColor blueColor]);\r\n    make.font([fnt2 fontWithSize:30]);\r\n});\r\n````\r\n\r\nor set range for a specific attribute (`with` is an optional semantic filler):\r\n\r\n````\r\n    make.foregroundColor([UIColor blueColor]).with.range(NSRange(6, 9));\r\n    make.font([fnt2 fontWithSize:30]).range(NSRange(6, 9));\r\n````\r\n\r\nIf you don't specify range, full range of string will be used.\r\n\r\nEven more than just an NSAttributedString maker!\r\n=======\r\n\r\nA couple of substring attribute setters. Set attributes for a first substring found:\r\n\r\n````\r\nNSAttributedString *result = [@\"This is a string\" makeString:^(BOStringMaker *make) {\r\n    make.first.substring(@\"is\", ^{\r\n        make.foregroundColor([UIColor greenColor]);\r\n    });\r\n}];\r\n````\r\n\r\nor highlight every substring:\r\n\r\n````\r\nNSAttributedString *result = [@\"This is a string\" makeString:^(BOStringMaker *make) {\r\n    make.each.substring(@\"is\", ^{\r\n        make.foregroundColor([UIColor greenColor]);\r\n    });\r\n}];\r\n````\r\n\r\nSupported platforms\r\n=======\r\n\r\n- **iOS 6.0** and later.\r\n- **OS X Mavericks (10.9)** and later.\r\n\r\nShould work fine on iOS 4.3+ and OS X 10.5+ (except of several attributes), but I haven't had a chance to test it.\r\n\r\nInstallation\r\n=======\r\n\r\nThe easiest way is to use CocoaPods:\r\n\r\nIn your Podfile\r\n\r\n`pod 'BOString'`\r\n\r\nand import it in a file you want to make strings like a boss:\r\n\r\n`#import \"Bostring.h\"`\r\n\r\nContribution\r\n=======\r\n\r\nFeel free to submit pull requests into a **separate** branch. Please don't submit pull requests to `master`.\r\n\r\nLicense\r\n=======\r\n\r\nBOString is released under the MIT License.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}